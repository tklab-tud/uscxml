# grep -ori 'datamodel="xpath' .
# grep -ori 'datamodel="null' .
# grep -ori 'manual' .

# manual tests: 
#   "test178.scxml"
#   "test230.scxml"
#   "test250.scxml"
#   "test301.scxml" # Allowed to reject
#   "test307.scxml"
#   "test313.scxml" # Allowed to be rejected
#   "test314.scxml" # Allowed to be rejected
#   "test415.scxml"
#   "test513.txt"

# null datamodel
# "test436.scxml"

# these are manual or xpath tests generated by the ecma generator
set(CTEST_CUSTOM_TESTS_IGNORE

  ### Ignore for ECMAScript datamodel
	"ecma/test178.scxml" # Manual - PASSED
	"ecma/test230.scxml" # Manual - PASSED
	"ecma/test250.scxml" # Manual - PASSED
	"ecma/test307.scxml" # Manual - PASSED
	"ecma/test313.scxml" # Manual - PASSED
	"ecma/test314.scxml" # Manual - PASSED
	"ecma/test415.scxml" # Manual - PASSED
  # "ecma/test513.txt" # Manual - PASSED
  
	"ecma/test301.scxml" # Invalid script URL - PASSED
	"ecma/test436.scxml" # Tests NULL datamodel - PASSED


  ### Ignore for flattened ECMAScript datamodel
	"fsm/ecma/test178.scxml" # Manual - PASSED
	"fsm/ecma/test230.scxml" # Manual - PASSED
	"fsm/ecma/test250.scxml" # Manual - PASSED
	"fsm/ecma/test307.scxml" # Manual - PASSED
	"fsm/ecma/test313.scxml" # Manual - PASSED
	"fsm/ecma/test314.scxml" # Manual - PASSED
	"fsm/ecma/test415.scxml" # Manual - PASSED
  # "fsm/ecma/test513.txt" # Manual - PASSED
  
	"fsm/ecma/test301.scxml" # Invalid script URL - PASSED
	"fsm/ecma/test436.scxml" # Tests NULL datamodel - PASSED

  ### Ignore for flattened, minimized ECMAScript datamodel
	"fsm/minimized/ecma/test178.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test230.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test250.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test307.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test313.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test314.scxml" # Manual - PASSED
	"fsm/minimized/ecma/test415.scxml" # Manual - PASSED
  # "fsm/minimized/ecma/test513.txt" # Manual - PASSED
  
	"fsm/minimized/ecma/test301.scxml" # Invalid script URL - PASSED
	"fsm/minimized/ecma/test436.scxml" # Tests NULL datamodel - PASSED


  ### Just ignore the XPath datamodel tests that hang, most of the rest fails as well
	"xpath/test178.scxml" # Manual - PASSED
	"xpath/test230.scxml" # Manual - PASSED
	"xpath/test250.scxml" # Manual - PASSED
	"xpath/test307.scxml" # Manual - PASSED
	"xpath/test313.scxml" # Manual - PASSED
	"xpath/test314.scxml" # Manual - PASSED
	"xpath/test415.scxml" # Manual - PASSED
  # "xpath/test513.txt" # Manual - PASSED
  
	"xpath/test301.scxml" # Invalid script URL - PASSED
	"xpath/test436.scxml" # Tests NULL datamodel - PASSED
  
  
  ### Ignore for LUA datamodel
	"lua/test178.scxml" # Manual - PASSED
	"lua/test230.scxml" # Manual - PASSED
	"lua/test250.scxml" # Manual - PASSED
	"lua/test307.scxml" # Manual - PASSED
	"lua/test313.scxml" # Manual - PASSED
	"lua/test314.scxml" # Manual - PASSED
	"lua/test415.scxml" # Manual - PASSED
  # "lua/test513.txt" # Manual - PASSED
  
	"lua/test301.scxml" # Invalid script URL - PASSED
	"lua/test436.scxml" # Tests NULL datamodel - PASSED

  ### Ignore for Prolog datamodel
	"prolog/test178.scxml" # Manual - PASSED
	"prolog/test230.scxml" # Manual - PASSED
	"prolog/test250.scxml" # Manual - PASSED
	"prolog/test307.scxml" # Manual - PASSED
	"prolog/test313.scxml" # Manual - PASSED
	"prolog/test314.scxml" # Manual - PASSED
	"prolog/test415.scxml" # Manual - PASSED
  # "lua/test513.txt" # Manual - PASSED
  
	"prolog/test301.scxml" # Invalid script URL - PASSED
	"prolog/test436.scxml" # Tests NULL datamodel - PASSED
  
  
  ### Ignore for PROMELA datamodel
  # manual tests
  "promela/test178.scxml" # two identical params in _event.raw - FAILED
  "promela/test230.scxml" # autoforwarded events are identical - PASSED
  "promela/test250.scxml" # no onexit in cancelled invoker - PASSED
  "promela/test307.scxml" # late data-binding - PASSED
	"promela/test313.scxml" # Manual - PASSED
	"promela/test314.scxml" # Manual - PASSED
  "promela/test415.scxml" # terminate on toplevel final - PASSED
  # "promela/test513.txt" # manual test - PASSED

  "promela/test301.scxml" # reject invalid script - PASSED
	"promela/test436.scxml" # Tests NULL datamodel - PASSED
  
  
  # "promela/test190.scxml" # string concatenation
  # "promela/test224.scxml" # string operation startWith
  # "promela/test280.scxml" # no runtime checks for undeclared variables
  # "promela/test350.scxml" # string concatenation
  # "promela/test509.scxml" # string operation contains
  # "promela/test518.scxml" # string operation contains
  # "promela/test519.scxml" # string operation contains
  # "promela/test520.scxml" # string operation contains
  # "promela/test525.scxml" # assumes unbound arrays
  # "promela/test530.scxml" # assigns DOM node to variable
  # "promela/test534.scxml" # string operation contains
  
  
  ### Ignore for SPIN model checking

  # manual tests
  # "spin/promela/test178.scxml" # two identical params in _event.raw - FAILED
  # "spin/promela/test230.scxml" # autoforwarded events are identical - PASSED
  # "spin/promela/test250.scxml" # no onexit in cancelled invoker - PASSED
  # "spin/promela/test307.scxml" # declare variable via script - FAILED
  # "spin/promela/test313.scxml" # assignment of 'return'
  # "spin/promela/test314.scxml" # assignment of 'return'
  # "spin/promela/test415.scxml" # terminate on toplevel final - PASSED
  # "spin/promela/test513.txt" # manual test - FAILED

  # "spin/promela/test301.scxml" # reject invalid script - PASSED
  # "spin/promela/test436.scxml" # In(s) -> _x.states[s] prevents completion as NULL dm is hardcoded

  # fail for syntax
  # "spin/promela/test152.scxml" # test that an illegal array or item value causes error.execution
  # "spin/promela/test156.scxml" # test that an error causes the foreach to stop execution
  # "spin/promela/test224.scxml" # string operation startWith
  # "spin/promela/test277.scxml" # platform creates unbound variable if we assign an illegal value to it
  # "spin/promela/test280.scxml" # late data binding / undeclared variable
  # "spin/promela/test286.scxml" # assignment to a non-declared var causes an error
  # "spin/promela/test294.scxml" # mixed types for event.data via donedata
  # "spin/promela/test309.scxml" # 'return' as an invalid boolean expression ought to eval to false
  # "spin/promela/test311.scxml" # assignment to a non-declared var
  # "spin/promela/test312.scxml" # assignment of 'return'
  # "spin/promela/test322.scxml" # assignment to _sessionid
  # "spin/promela/test324.scxml" # assignment to _name
  # "spin/promela/test325.scxml" # assignment from _ioprocessor
  # "spin/promela/test326.scxml" # assignment from _ioprocessor
  # "spin/promela/test329.scxml" # test that none of the system variables can be modified
  # "spin/promela/test344.scxml" # 'return' as a cond
  # "spin/promela/test346.scxml" # assignment to system variables
  # "spin/promela/test350.scxml" # string concatenation
  # "spin/promela/test354.scxml" # mixed types for event.data
  # "spin/promela/test401.scxml" # variable not declared
  # "spin/promela/test402.scxml" # variable not declared
  # "spin/promela/test487.scxml" # assignment of 'return'
  # "spin/promela/test509.scxml" # string operation contains
  # "spin/promela/test518.scxml" # string operation contains
  # "spin/promela/test519.scxml" # string operation contains
  # "spin/promela/test520.scxml" # string operation contains
  # "spin/promela/test525.scxml" # assumes unbound arrays
  # "spin/promela/test530.scxml" # assigns DOM node to variable
  # "spin/promela/test534.scxml" # string operation contains

  # fail for semantics
  # "spin/promela/test159.scxml" # error raised causes all subsequent elements to be skipped
  # "spin/promela/test194.scxml" # illegal target for send
  # "spin/promela/test199.scxml" # invalid send type
  # "spin/promela/test216.scxml" # nested SCXML document with srcexpr at invoke
  # "spin/promela/test298.scxml" # non-existent data model location
  # "spin/promela/test331.scxml" # tests _error.type via 'error.execution'
  # "spin/promela/test332.scxml" # tests _error.sendid via 'error.execution'
  # "spin/promela/test343.scxml" # test that illegal <param> produces error.execution
  # "spin/promela/test488.scxml" # illegal expr in <param> produces error.execution
  # "spin/promela/test496.scxml" # tests error.communication with illegal target
  # "spin/promela/test521.scxml" # tests error.communication with illegal target
  # "spin/promela/test528.scxml" # illegal 'expr' produces error.execution
  # "spin/promela/test531.scxml" # uses _ioprocessors.basichttp.location
  # "spin/promela/test532.scxml" # uses _ioprocessors.basichttp.location
  # "spin/promela/test553.scxml" # error in namelist
  # "spin/promela/test554.scxml" # evaluation of <invoke>'s args causes an error
  # "spin/promela/test577.scxml" # send without target for basichttp
  
  
  ### Ignore for generated C sources
  
  "gen/c/ecma/test216.scxml" // invoke srcexpr
  
  # we do not support io processors yet
  "gen/c/ecma/test201.scxml" # basichttp
  "gen/c/ecma/test500.scxml" # _ioprocessors
  "gen/c/ecma/test501.scxml" # _ioprocessors
  "gen/c/ecma/test509.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test510.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test518.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test519.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test520.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test522.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test531.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test532.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test534.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test567.scxml" # _ioprocessors / basichttp
  "gen/c/ecma/test569.scxml" # _ioprocessors
  "gen/c/ecma/test577.scxml" # basichttp
  
  # failing is succeeding
  "gen/c/ecma/test301.scxml"
  
  # manual test
  "gen/c/ecma/test307.scxml"
  
  # XML DOM in data
  "gen/c/ecma/test530.scxml"
  "gen/c/ecma/test557.scxml"
  "gen/c/ecma/test561.scxml"


  ### Ignore for delay with performance

  # timeouts with benchmarking due to delayed events
  "perf/gen/c/ecma/test175.scxml"
  "perf/gen/c/ecma/test185.scxml"
  "perf/gen/c/ecma/test186.scxml"
  "perf/gen/c/ecma/test208.scxml"
  "perf/gen/c/ecma/test210.scxml"
  "perf/gen/c/ecma/test409.scxml"
  "perf/gen/c/ecma/test423.scxml"
  "perf/gen/c/ecma/test553.scxml"
  "perf/gen/c/ecma/test579.scxml"

  "perf/ecma/test175.scxml"
  "perf/ecma/test185.scxml"
  "perf/ecma/test186.scxml"
  "perf/ecma/test208.scxml"
  "perf/ecma/test210.scxml"
  "perf/ecma/test409.scxml"
  "perf/ecma/test423.scxml"
  "perf/ecma/test553.scxml"
  "perf/ecma/test579.scxml"
  
  ### Ignore some Header self-sufficient tests
  "header/bindings/swig/msvc/inttypes.h"
  "header/bindings/swig/wrapped/WrappedDataModel.h"
  "header/bindings/swig/wrapped/WrappedExecutableContent.h"
  "header/bindings/swig/wrapped/WrappedInterpreterMonitor.h"
  "header/bindings/swig/wrapped/WrappedInvoker.h"
  "header/bindings/swig/wrapped/WrappedIOProcessor.h"
  
  
)
# unset(CTEST_CUSTOM_TESTS_IGNORE)


